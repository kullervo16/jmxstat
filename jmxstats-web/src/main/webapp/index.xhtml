<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html">
    <h:head>
        <title>JMX Stats demo page</title>        
        <meta charset="utf-8"/>
        <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <meta name="description" content=""/>
        <meta name="author" content=""/>   
        <script src="clientjs/jquery.min.js"></script>
        <script src="clientjs/bootstrap.min.js"></script>        
        <!-- Angular JS-->        
        <script src="clientjs/angular.js"></script>
        <!-- Bootstrap core CSS-->
        <link href="css/bootstrap.min.css" rel="stylesheet"/>        
        <!-- Bootstrap theme-->
        <link href="css/bootstrap-theme.min.css" rel="stylesheet"/>        
        <script src="clientjs/ui-bootstrap-0.14.3.js"></script>
        <script src="clientjs/ui-bootstrap-tpls-0.14.3.js"></script>
        <script type="text/javascript" src="clientjs/jolokia.js"></script>
        <script type="text/javascript" src="clientjs/jolokia-simple.js"></script>
        <script src="clientjs/app.js"></script>            
    </h:head>
    <h:body role="document" >
        <div role="main" class="container theme-showcase" ng-app="demo" ng-controller="demoController as demo">  
            <div class="jumbotron">
                <h1>JMX Stats demo</h1>                
            </div> 

            <h1>Counter</h1>
            <h2>Usecase</h2>
            <p>The counter counts events... the value simply increases and increases. Either by 1 (default increment) or by the value you specify</p>
            <p>Typical use cases are : </p>
            <ul>
                <li>Number of page hits (typically +1 at the detection point)</li>
                <li>Number of bytes read (typically +size of the message)</li>
            </ul>
            <h2>Examples</h2>
            <p>A non-JMX counter can be used in a scope... Here is an example of a counter in session scope : <span class="label label-default"><h:outputText value="${counter.counterValue}"/></span></p>
            <p>This means that if you would open a new browser and navigate to this page, the counter will restart from 1</p>
            <p>JMX counters are always application scoped, so it will probably not start at 1. And changes from your page will also be reflected to others : <span class="label label-default"><h:outputText value="${counter.jmxValue}"/></span></p>        
            <p>Since it is exposed via JMX, you can follow it with a JMX browser. The name of the counter is <span style="font-weight: bold">kullervo16.jmx:type=demoCounter</span></p>
            <p>If you have jolokia installed (like we do), you can access it via REST on this URL <span style="font-weight: bold"><a href="/jolokia-war-1.3.3/read/kullervo16.jmx:type=demoCounter/Value" target="_blank">jolokia-war-1.3.3/read/kullervo16.jmx:type=demoCounter/Value</a></span>, 
                which you can use to update the value via ajax like this (open a new browser and see this counter move automagically) <span class="label label-default">{{demoCounter.value}}</span></p>
            
            <h3>Additional features</h3>
            <p>The counter class allows you to decorate it with several additional features. This way, you can create the counter with implicit behaviour at
                declaration time, without the code obtaining the counter via the factory to be aware of it (seperation of concern).</p>
            <p>The use of the decorater pattern keeps the counters itself as light as possible, not wasting any time checking for the additional features when
                you don't need it (important as you will often use the counters to measure the performance of your system, so the overhead should be minimal)</p>
            <p>All features below can be combined at will, sometimes the sequence in which you request them may influence the resulting behaviour</p>
            <ul>
                <li>Maximum value : this add-on will not allow the counter to increase above the specified value</li>
                <li>Minimum value : this add-on will not allow the counter to decrease below the specified value (typically used with the Gauge, see next section)</li>
                <li>EventEmitter : this add-on sends a PropertyChangeEvent to all registered PropertyChangeListeners when the update was done. The events are sent out synchonously</li>
                <li>ValueLogger : this add-on logs the changes to slf4j</li>
            </ul>
                
            <h1>Gauge</h1>
            <p>A gauge is a special kind of counter that can both increment and decrement. It is created as a Counter add-on, so you can combine it </p>
            <h2>Usecase</h2>
            <p>When you launch asynchronous calls with a callbackhandler, and you want to know (or restrict) the maximum number of outstanding requests,
            you can create a JMX Gauge with a maximum value and increment it when you call the asynch method, and decrement it when the callbackhandler completed</p>            
            <h2>Examples</h2>
            <p>Here you have this typical producer/consumer paradigm, directly executed via Jolokia calls (also the operations)</p>
            <uib-progressbar max="10" animate="false" value="demoGauge.value" type="{{progressStyle}}"><b>{{demoGauge.value}}/10</b></uib-progressbar>
            <button id="produce" onclick="angular.element(this).scope().produce()">Produce</button>
            <button id="consume" onclick="angular.element(this).scope().consume()">Consume</button>
        </div>

    </h:body>
</html>

